// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { ApiFinanceV1BudgetsAllGetAllBudgetsData, ApiFinanceV1BudgetsAllGetAllBudgetsResponses, ApiFinanceV1BudgetsBudgetIdTransactionsTransactionIdAddTransactionToBudgetData, ApiFinanceV1BudgetsBudgetIdTransactionsTransactionIdAddTransactionToBudgetErrors, ApiFinanceV1BudgetsBudgetIdTransactionsTransactionIdAddTransactionToBudgetResponses, ApiFinanceV1BudgetsCreateCreateBudgetData, ApiFinanceV1BudgetsCreateCreateBudgetErrors, ApiFinanceV1BudgetsCreateCreateBudgetResponses, ApiFinanceV1BudgetsNamesGetBudgetsNamesData, ApiFinanceV1BudgetsNamesGetBudgetsNamesResponses, ApiFinanceV1TransactionsGetTransactionsData, ApiFinanceV1TransactionsGetTransactionsErrors, ApiFinanceV1TransactionsGetTransactionsResponses, ApiFinanceV1TransactionsLineItemsLineItemIdDeleteLineItemEndpointData, ApiFinanceV1TransactionsLineItemsLineItemIdDeleteLineItemEndpointErrors, ApiFinanceV1TransactionsLineItemsLineItemIdDeleteLineItemEndpointResponses, ApiFinanceV1TransactionsLineItemsLineItemIdUpdateLineItemEndpointData, ApiFinanceV1TransactionsLineItemsLineItemIdUpdateLineItemEndpointErrors, ApiFinanceV1TransactionsLineItemsLineItemIdUpdateLineItemEndpointResponses, ApiFinanceV1TransactionsTransactionIdBreakdownCreateBreakdownData, ApiFinanceV1TransactionsTransactionIdBreakdownCreateBreakdownErrors, ApiFinanceV1TransactionsTransactionIdBreakdownCreateBreakdownResponses, ApiFinanceV1TransactionsTransactionIdBreakdownGetBreakdownData, ApiFinanceV1TransactionsTransactionIdBreakdownGetBreakdownErrors, ApiFinanceV1TransactionsTransactionIdBreakdownGetBreakdownResponses, ApiFinanceV1TransactionsTransactionIdTypeUpdateTransactionTypeData, ApiFinanceV1TransactionsTransactionIdTypeUpdateTransactionTypeErrors, ApiFinanceV1TransactionsTransactionIdTypeUpdateTransactionTypeResponses, ApiFinanceV1TransactionsUpdateUpdateTransactionsData, ApiFinanceV1TransactionsUpdateUpdateTransactionsResponses, ApiFinanceV1UserTokenUpdateAccessUrlEndpointData, ApiFinanceV1UserTokenUpdateAccessUrlEndpointErrors, ApiFinanceV1UserTokenUpdateAccessUrlEndpointResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get transactions (gateway)
 *
 * Forwards a request to retrieve transactions for the authenticated user from the finance microservice. Supports pagination, sorting and direction flags.
 */
export const apiFinanceV1TransactionsGetTransactions = <ThrowOnError extends boolean = false>(options: Options<ApiFinanceV1TransactionsGetTransactionsData, ThrowOnError>) => {
    return (options.client ?? client).get<ApiFinanceV1TransactionsGetTransactionsResponses, ApiFinanceV1TransactionsGetTransactionsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/finance/v1/transactions',
        ...options
    });
};

/**
 * Update transactions (gateway)
 *
 * Forwards a POST to the finance microservice that triggers fetching and storing new transactions for users' accounts.
 */
export const apiFinanceV1TransactionsUpdateUpdateTransactions = <ThrowOnError extends boolean = false>(options?: Options<ApiFinanceV1TransactionsUpdateUpdateTransactionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<ApiFinanceV1TransactionsUpdateUpdateTransactionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/finance/v1/transactions/update',
        ...options
    });
};

/**
 * Get transaction breakdown (gateway)
 *
 * Forwards a request to retrieve the breakdown (line items) for the specified transaction from the finance microservice.
 */
export const apiFinanceV1TransactionsTransactionIdBreakdownGetBreakdown = <ThrowOnError extends boolean = false>(options: Options<ApiFinanceV1TransactionsTransactionIdBreakdownGetBreakdownData, ThrowOnError>) => {
    return (options.client ?? client).get<ApiFinanceV1TransactionsTransactionIdBreakdownGetBreakdownResponses, ApiFinanceV1TransactionsTransactionIdBreakdownGetBreakdownErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/finance/v1/transactions/{transaction_id}/breakdown',
        ...options
    });
};

/**
 * Create transaction breakdown (gateway)
 *
 * Forwards a request to create a breakdown (line items) for the given transaction on the finance microservice.
 */
export const apiFinanceV1TransactionsTransactionIdBreakdownCreateBreakdown = <ThrowOnError extends boolean = false>(options: Options<ApiFinanceV1TransactionsTransactionIdBreakdownCreateBreakdownData, ThrowOnError>) => {
    return (options.client ?? client).post<ApiFinanceV1TransactionsTransactionIdBreakdownCreateBreakdownResponses, ApiFinanceV1TransactionsTransactionIdBreakdownCreateBreakdownErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/finance/v1/transactions/{transaction_id}/breakdown',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete line item (gateway)
 *
 * Forwards a request to delete the specified line item from a transaction on the finance microservice.
 */
export const apiFinanceV1TransactionsLineItemsLineItemIdDeleteLineItemEndpoint = <ThrowOnError extends boolean = false>(options: Options<ApiFinanceV1TransactionsLineItemsLineItemIdDeleteLineItemEndpointData, ThrowOnError>) => {
    return (options.client ?? client).delete<ApiFinanceV1TransactionsLineItemsLineItemIdDeleteLineItemEndpointResponses, ApiFinanceV1TransactionsLineItemsLineItemIdDeleteLineItemEndpointErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/finance/v1/transactions/line-items/{line_item_id}',
        ...options
    });
};

/**
 * Update line item (gateway)
 *
 * Forwards a request to update a line item belonging to a transaction on the finance microservice.
 */
export const apiFinanceV1TransactionsLineItemsLineItemIdUpdateLineItemEndpoint = <ThrowOnError extends boolean = false>(options: Options<ApiFinanceV1TransactionsLineItemsLineItemIdUpdateLineItemEndpointData, ThrowOnError>) => {
    return (options.client ?? client).put<ApiFinanceV1TransactionsLineItemsLineItemIdUpdateLineItemEndpointResponses, ApiFinanceV1TransactionsLineItemsLineItemIdUpdateLineItemEndpointErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/finance/v1/transactions/line-items/{line_item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update transaction type (gateway)
 *
 * Forwards a request to update the type of a transaction on the finance microservice.
 */
export const apiFinanceV1TransactionsTransactionIdTypeUpdateTransactionType = <ThrowOnError extends boolean = false>(options: Options<ApiFinanceV1TransactionsTransactionIdTypeUpdateTransactionTypeData, ThrowOnError>) => {
    return (options.client ?? client).patch<ApiFinanceV1TransactionsTransactionIdTypeUpdateTransactionTypeResponses, ApiFinanceV1TransactionsTransactionIdTypeUpdateTransactionTypeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/finance/v1/transactions/{transaction_id}/type',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create budget (gateway)
 *
 * Forwards a POST to create a new budget on the finance microservice.
 */
export const apiFinanceV1BudgetsCreateCreateBudget = <ThrowOnError extends boolean = false>(options: Options<ApiFinanceV1BudgetsCreateCreateBudgetData, ThrowOnError>) => {
    return (options.client ?? client).post<ApiFinanceV1BudgetsCreateCreateBudgetResponses, ApiFinanceV1BudgetsCreateCreateBudgetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/finance/v1/budgets/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add transaction to budget (gateway)
 *
 * Forwards a request to add an existing transaction to the specified budget on the finance microservice.
 */
export const apiFinanceV1BudgetsBudgetIdTransactionsTransactionIdAddTransactionToBudget = <ThrowOnError extends boolean = false>(options: Options<ApiFinanceV1BudgetsBudgetIdTransactionsTransactionIdAddTransactionToBudgetData, ThrowOnError>) => {
    return (options.client ?? client).post<ApiFinanceV1BudgetsBudgetIdTransactionsTransactionIdAddTransactionToBudgetResponses, ApiFinanceV1BudgetsBudgetIdTransactionsTransactionIdAddTransactionToBudgetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/finance/v1/budgets/{budget_id}/transactions/{transaction_id}',
        ...options
    });
};

/**
 * Get all budgets (gateway)
 *
 * Forwards a request to retrieve all budgets for the authenticated user from the finance microservice.
 */
export const apiFinanceV1BudgetsAllGetAllBudgets = <ThrowOnError extends boolean = false>(options?: Options<ApiFinanceV1BudgetsAllGetAllBudgetsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ApiFinanceV1BudgetsAllGetAllBudgetsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/finance/v1/budgets/all',
        ...options
    });
};

/**
 * Get budget names (gateway)
 *
 * Forwards a request to retrieve all budget IDs and names for the authenticated user from the finance microservice.
 */
export const apiFinanceV1BudgetsNamesGetBudgetsNames = <ThrowOnError extends boolean = false>(options?: Options<ApiFinanceV1BudgetsNamesGetBudgetsNamesData, ThrowOnError>) => {
    return (options?.client ?? client).get<ApiFinanceV1BudgetsNamesGetBudgetsNamesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/finance/v1/budgets/names',
        ...options
    });
};

/**
 * Update user access URL (gateway)
 *
 * Forwards a request to update the authenticated user's access URL on the finance microservice. Accepts a token in the body used to claim an access URL.
 */
export const apiFinanceV1UserTokenUpdateAccessUrlEndpoint = <ThrowOnError extends boolean = false>(options: Options<ApiFinanceV1UserTokenUpdateAccessUrlEndpointData, ThrowOnError>) => {
    return (options.client ?? client).put<ApiFinanceV1UserTokenUpdateAccessUrlEndpointResponses, ApiFinanceV1UserTokenUpdateAccessUrlEndpointErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/finance/v1/user/token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
